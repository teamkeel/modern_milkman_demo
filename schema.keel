// PRODUCTS
model Product {
    fields {
        title Text
        description Text
        imageUrl Text
        gtin Text?
        price Number
        size Text
        unitPrice Number?
        specialOfferDiscount Number
        specialOffer Boolean
        orderItems OrderItems[]
        bundles ProductBundle[]
    }

    actions {
        get getProduct(id)
        create createProduct() with (
            title,
            description,
            imageUrl,
            price,
            size,
            specialOfferDiscount,
            specialOffer,
        )
        list listProducts()
        list listOrderItemsProduct(orderItems.id)
        update updateProduct(id) with (title?, description?, imageUrl?, gtin?)
        delete deleteProduct(id)
    }

    @permission(
        expression: true,
        actions: [list, create, update, delete, get]
    )
}

model Bundle {
    fields {
        title Text
        description Text
        imageUrl Text
        gtin Text?
        size Text
        unitPrice Text?
        specialOfferDiscount Number
        specialOffer Boolean
        products ProductBundle[]
    }
}

model ProductBundle {
    fields {
        products Product
        bundles Bundle
    }
}

// CUSTOMERS
model Customer {
    fields {
        firstName Text
        lastName Text
        email Text
        phone Text
        orders Order[]
        marketingConsent Boolean
        deliveryAddress Text
    }

    actions {
        list listCustomers()
        get getCustomer(id)
        create createCustomer() with (
            firstName,
            lastName,
            email,
            phone,
            marketingConsent,
            deliveryAddress,
        )
        update updateCustomer(id)
    }

    @permission(
        expression: true,
        actions: [list, create, get]
    )

    @on(
        [create],
        slackmessage
    )
}

model Order {
    fields {
        customer Customer
        site Site
        status OrderStatus @default(OrderStatus.Draft)
        items OrderItems[]
        totalDiscount Number?
        totalPrice Number?
        couponCode CouponCode?
    }

    actions {
        create createOrder() with (
            customer.id,
            site.id,
            items.product.id,
            items.quantity,
            status,
            couponCode.id?,
        ) @function
        update updateOrder(id) with (
            customer.id,
            site.id,
            items.product.id,
            items.quantity,
            status,
            couponCode.id?,
        ) @function
        list listOrders()
        list listCustomerOrders(customer.id)
        get getOrder(id)
        delete deleteOrder(id)
    }

    @permission(
        expression: true,
        actions: [list, create, update, delete, get]
    )
}

enum OrderStatus {
    Draft
    New
    Readytocollect
    Collected
    Cancelled
}

model OrderItems {
    fields {
        order Order
        product Product
        quantity Number
    }

    actions {
        list listOrderItems(order.id)
        list listOrderProducts(product.id)
        get getOrderItem(id)
    }

    @permission(
        expression: true,
        actions: [list, get]
    )
}

// OPERATIONS
model Site {
    fields {
        name Text
        address Text
        storageLocations StorageLocation[]
        currency Text?
    }

    actions {
        create createSite() with (name, address)
        list listSite()
        get getSite(id)
    }

    @permission(
        expression: true,
        actions: [create, list, get]
    )
}

model SiteProduct {
    fields {
        product Product
        locations SiteProductLocation[]
    }

    actions {
        create createSiteProduct() with (
            product.id,
            locations.location.id,
            product.price,
        )
        list listSiteProduct()
        update updateSiteProduct(id) with (product.price)
    }

    @permission(
        expression: true,
        actions: [list, create, update]
    )
}

model SiteProductLocation {
    fields {
        location StorageLocation
        quantity Number
        siteProduct SiteProduct
    }

    actions {
        create createStockItem() with (
            location.id,
            location.site.id,
            quantity,
            siteProduct.product.id,
            siteProduct.product.price,
        )
        list listSiteProductLocation()
        get getStockItem(id)
        update updateSiteProductLocation(id) with (quantity)
    }

    @permission(
        expression: true,
        actions: [list, update, create, get]
    )
}

model StorageLocation {
    fields {
        name Text
        site Site
    }

    actions {
        create createStorageLocation() with (name, site.id)
        list listStorageLocations()
        get getStorageLocation(id)
    }

    @permission(
        expression: true,
        actions: [list, update, create, get]
    )
}

// COUPON CODES
model CouponCode {
    fields {
        code Text @unique
        validFrom Timestamp?
        validTo Timestamp?
        minimumOrderAmount Number?
        discount Number
    }

    actions {
        create createCouponCode() with (code, discount) {
            @set(couponCode.validFrom = ctx.now)
        }
        get getCouponCode(id)
        list listCouponCodes()
        update updateCouponCode(id) with (
            code?,
            discount?,
            validFrom?,
            validTo?,
            minimumOrderAmount?,
        )
    }

    @permission(
        expression: true,
        actions: [create, get, list, update]
    )
}

model CouponCodesCustomers {
    fields {
        couponCode CouponCode
        customer Customer
    }

    actions {
        create createCouponCodesCustomers() with (couponCode.id, customer.id)
        list listCouponCodesCustomers()
        get getCouponCodesCustomers(id)
    }

    @permission(
        expression: true,
        actions: [create, get, list]
    )
}

model CouponCodesProducts {
    fields {
        couponCode CouponCode
        product Product
    }

    actions {
        create createCouponCodesProducts() with (couponCode.id, product.id)
        list listCouponCodesProducts()
        get getCouponCodesProducts(id)
    }

    @permission(
        expression: true,
        actions: [create, get, list]
    )
}
